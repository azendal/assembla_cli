#!/usr/bin/env ruby

$:.unshift File.expand_path("../../lib", __FILE__)
require 'assembla_cli'

extend Hirb::Console

# TODO: Prompt for credentials and create this file if not exists
# TODO: Move authentication to another class or module
username, password = File.read("#{ENV['HOME']}/.assembla_cli").split

@cfg = {
  'username' => username,
  'password' => password,
  "zebra_colors" => {
    "color1" => "black_background",
    "color2" => "blue_background"
  }
}

@cfg = @cfg.merge MultiJson.decode(File.read(Dir.pwd + '/.assemblarc')) if File.exists?(Dir.pwd + '/.assemblarc')

Assembla.login(@cfg['username'], @cfg['password']) if @cfg['username'] && @cfg['password']
Assembla.space(@cfg['space']) if @cfg['space']
Assembla.my_report_id(@cfg['report_id']) if @cfg['report_id']

# Statuses dont change a log, so keep them cached to make ticket
# listing faster.
def status_translations
  @status_translations ||= Assembla.statuses['ticket_statuses']
end

def milestone_translation
  @milestone_translation ||= Assembla.milestones['milestones']
end

def clean_cache
  @milestone_translation
  @status_translations
end

def priority_string number
  ['', 'Highest (1)', 'High (2)', 'Normal (3)', 'Low (4)', 'Lowest (5)'][number]
end

# Translates a status-id into its status-name equivalent.
def status_string number
  status_translations.each do |hash|
    if hash['list_order'] == number
      return hash['name']
    end
  end
  'Unknown'
end

# Translates a milestone-id into its milestone-name equivalent.
def milestone_string number
  milestone_translation.each do |hash|
    if hash['id'] == number
      return hash['title']
    end
  end
  'Unknown'
end

def reports
  all_reports = Assembla.custom_reports['custom_reports']
  table all_reports['user_reports'] + all_reports['team_reports'], :fields => ['id', 'name']
end

def change_report
  reports
  print "select report number>"
  id = gets.chomp
  Assembla.my_report_id id
end

def my_tickets
  if Assembla.my_report_id.nil?
    change_report
  end
  hash = Assembla.my_tickets['tickets']
  print_tickets hash
end

def tickets
  hash = Assembla.tickets['tickets']
  print_tickets hash
end

def print_tickets hash
  # Prepare table data.
  headers = {
    'number' => 'NUMBER', 
    'priority_name' => 'PRIORITY', 
    'milestone_name' => 'MILESTONE', 
    'status_name' => 'STATUS', 
    'summary' => 'SUMMARY'
  }

  fields = ['number', 'priority_name', 'milestone_name', 'status_name', 'summary']
  
  hash.each { |row| row['priority_name'] = priority_string(row['priority']) }
  hash.each { |row| row['milestone_name'] = milestone_string(row['milestone_id']) }

  # Print data
  table = Hirb::Helpers::AutoTable.render(hash, :fields => fields, :headers => headers)
  c = @cfg['zebra_colors']['color1']
  i = 0;
  
  table.each_line do |line|
    if i > 2
      c = c == @cfg['zebra_colors']['color1'] ? @cfg['zebra_colors']['color2'] : @cfg['zebra_colors']['color1']
    end
    puts line.chomp.to_ansi.white.send(c)
    i = i + 1
  end

  nil
end

def milestones
  table Assembla.milestones['milestones'], :fields => ['id', 'title']
end

def http (ticket_id)
  `open https://www.assembla.com/spaces/#{Assembla.instance_variable_get('@current_space')['name']}/tickets/#{ticket_id}`
  nil
end

def ticket (id = nil)
  if id
    Assembla.ticket id
  else
    puts Assembla.ticket['ticket']
  end
end

def change_space(space_name)
  Assembla.space space_name
  prompt = "assembla(#{space_name})> "
  conf.prompt_i = conf.prompt_n = conf.prompt_s = conf.prompt_c = prompt
end

def commands
  # TODO: Complete help
  puts <<-eos

    Assembla CLI, version #{AssemblaCli::VERSION}

    change_space  # Changes current space
    change_report # Changes current default report
    tickets       # Lists tickets for current space
    my_tickets    # Lists tickets for report
    commands, h   # Show this message

  eos
end

def h
  commands
end

ENV['IRBRC'] = File.expand_path('../../lib/assembla_cli/irbrc', __FILE__)
IRB.start

