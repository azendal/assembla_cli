#!/usr/bin/env ruby

$:.unshift File.expand_path("../../lib", __FILE__)
require 'assembla_cli'

extend Hirb::Console

# TODO: Prompt for credentials and create this file if not exists
# TODO: Move authentication to another class or module
username, password = File.read("#{ENV['HOME']}/.assembla_cli").split
Assembla.login(username, password)
# Assembla.space('space name')
# Assembla.my_report('personal report id')


# Statuses dont change a log, so keep them cached to make ticket
# listing faster.
def status_translations
  @status_translations ||= Assembla.statuses['ticket_statuses']
end

def milestone_translation
  @milestone_translation ||= Assembla.milestones['milestones']
end

def clean_cache
  @milestone_translation
  @status_translations
end

def priority_string number
  ['', 'Highest (1)', 'High (2)', 'Normal (3)', 'Low (4)', 'Lowest (5)'][number]
end

# Translates a status-id into its status-name equivalent.
def status_string number
  status_translations.each do |hash|
    if hash['list_order'] == number
      return hash['name']
    end
  end
  'Unknown'
end

# Translates a milestone-id into its milestone-name equivalent.
def milestone_string number
  milestone_translation.each do |hash|
    if hash['id'] == number
      return hash['title']
    end
  end
  'Unknown'
end

def reports
  all_reports = Assembla.custom_reports['custom_reports']
  table all_reports['user_reports'] + all_reports['team_reports'], :fields => ['id', 'name']
end

def change_report
  reports
  print "select report number>"
  id = gets.chomp
  Assembla.my_report_id id
end

def my_tickets
  if Assembla.my_report_id.nil?
    change_report
  end
  hash = Assembla.my_tickets['tickets']
  print_tickets hash
end

def tickets
  hash = Assembla.tickets['tickets']
  print_tickets hash
end

def print_tickets hash
  # Prepare table data.
  headers = ['number', 'priority', 'milestone_id', 'status_name', 'summary']
  # Replace status numbers for status strings
  # TODO: we might need to send data so overriding is not cool.
  # So maybe we should manage translations differently.
  hash.each { |row| row['priority'] = priority_string(row['priority']) }
  hash.each { |row| row['milestone_id'] = milestone_string(row['milestone_id']) }

  # Print data
  table = Hirb::Helpers::AutoTable.render(hash, :fields => headers)
  c = :green_background
  table.each_line do |line|
    c = c == :green_background ? :yellow_background : :green_background
    puts line.chomp.to_ansi.black.send(c)
  end
  # TODO: Think on how this can be handled better.
  # clean_cache
  nil
end

def milestones
  table Assembla.milestones['milestones'], :fields => ['id', 'title']
end

def http (ticket_id)
  `open https://www.assembla.com/spaces/#{Assembla.instance_variable_get('@current_space')['name']}/tickets/#{ticket_id}`
  nil
end

def ticket (id)
  Assembla.ticket
end

def change_space(space_name)
  Assembla.space space_name
  prompt = "assembla(#{space_name})> "
  conf.prompt_i = conf.prompt_n = conf.prompt_s = conf.prompt_c = prompt
end

# TODO: remove warn message about aliasing irb_help
def help
  # TODO: Complete help
  puts <<-eos

    Assembla CLI, version #{AssemblaCli::VERSION}

    change_space  # Changes current space
    change_report # Changes current default report
    tickets       # Lists tickets for current space
    my_tickets    # Lists tickets for report
    help          # Show this message

  eos
end

ENV['IRBRC'] = File.expand_path('../../lib/assembla_cli/irbrc', __FILE__)
IRB.start

